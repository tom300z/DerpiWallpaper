import os
import platform
import shutil
from pathlib import Path
from appdirs import user_config_dir
import subprocess
import sys

def run_on_startup(enable=True):
    """Sets the app to run on startup (OS independent)."""
    app_name = "DerpiWallpaper"  # Replace with your app's name
    executable_path = Path(sys.argv[0])  # Path to the executable generated by Nuitka in onefile mode
    minimized_flag = "--minimized"  # The flag to start the app minimized

    if platform.system() == "Windows":
        startup_dir = Path(os.getenv("APPDATA")) / "Microsoft" / "Windows" / "Start Menu" / "Programs" / "Startup"  # type: ignore
        shortcut_path = startup_dir / f"{app_name}.lnk"

        if enable:
            import winshell  # Requires `winshell` for creating Windows shortcuts
            with winshell.shortcut(str(shortcut_path)) as shortcut:  # type: ignore
                shortcut.path = str(executable_path)
                shortcut.arguments = minimized_flag
        else:
            if shortcut_path.exists():
                shortcut_path.unlink()

    elif platform.system() == "Darwin":  # macOS
        launch_agents_dir = Path.home() / "Library" / "LaunchAgents"
        launch_agents_dir.mkdir(parents=True, exist_ok=True)
        plist_path = launch_agents_dir / f"{app_name}.plist"

        if enable:
            plist_content = f"""
            <?xml version="1.0" encoding="UTF-8"?>
            <!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
            <plist version="1.0">
            <dict>
                <key>Label</key>
                <string>{app_name}</string>
                <key>ProgramArguments</key>
                <array>
                    <string>{str(executable_path)}</string>
                    <string>{minimized_flag}</string>
                </array>
                <key>RunAtLoad</key>
                <true/>
            </dict>
            </plist>
            """
            with open(plist_path, "w") as plist_file:
                plist_file.write(plist_content)
            subprocess.run(["launchctl", "load", plist_path])
        else:
            subprocess.run(["launchctl", "unload", plist_path])
            if plist_path.exists():
                plist_path.unlink()

    elif platform.system() == "Linux":
        autostart_dir = Path(user_config_dir()) / "autostart"
        autostart_dir.mkdir(parents=True, exist_ok=True)
        desktop_entry_path = autostart_dir / f"{app_name}.desktop"

        if enable:
            desktop_entry_content = f"""
            [Desktop Entry]
            Type=Application
            Exec="{str(executable_path)}" {minimized_flag}
            Hidden=false
            NoDisplay=false
            X-GNOME-Autostart-enabled=true
            Name={app_name}
            Comment=Start {app_name} on login
            """
            with open(desktop_entry_path, "w") as desktop_file:
                desktop_file.write(desktop_entry_content)
        else:
            if desktop_entry_path.exists():
                desktop_entry_path.unlink()


def is_run_on_startup():
    """Checks if the app is configured to run on startup in a cross-platform manner."""
    app_name = "DerpiWallpaper"  # Replace with your app's name
    executable_path = Path(sys.executable)  # Path to the Nuitka-generated executable

    if platform.system() == "Windows":
        # Check for the shortcut in the Windows Startup folder
        startup_dir = Path(os.getenv("APPDATA")) / "Microsoft" / "Windows" / "Start Menu" / "Programs" / "Startup" # type: ignore
        shortcut_path = startup_dir / f"{app_name}.lnk"
        return shortcut_path.exists() and shortcut_path.is_file()

    elif platform.system() == "Darwin":  # macOS
        # Check for the plist file in LaunchAgents
        plist_path = Path.home() / "Library" / "LaunchAgents" / f"{app_name}.plist"
        return plist_path.exists() and plist_path.is_file()

    elif platform.system() == "Linux":
        # Check for the .desktop file in the autostart directory
        autostart_dir = Path(user_config_dir()) / "autostart"
        desktop_entry_path = autostart_dir / f"{app_name}.desktop"
        return desktop_entry_path.exists() and desktop_entry_path.is_file()

    return False